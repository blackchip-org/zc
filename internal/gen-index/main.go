package main

//go:generate go run main.go ../../doc/index.md

import (
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
	"unicode/utf8"

	"github.com/blackchip-org/zc/pkg/doc"
	"github.com/blackchip-org/zc/pkg/scanner"
)

const (
	Root = "../.."
)

type Entry struct {
	Func        string
	Module      string
	Description string
	File        string
	Anchor      string
}

var EntryMap map[string][]Entry
var IndexMainMap map[string]string

func init() {
	EntryMap = make(map[string][]Entry)
	IndexMainMap = make(map[string]string)
}

func main() {
	log.SetFlags(0)

	ops, err := doc.ParseSourceFiles("../../pkg/ops")
	if err != nil {
		log.Fatal(err)
	}
	table := doc.Group(ops)
	var names []string
	for name := range table {
		names = append(names, name)
	}
	sort.Strings(names)

	out := &strings.Builder{}
	fmt.Fprintf(out, "<!-- Document generated by \"gen-index\"; DO NOT EDIT -->")
	fmt.Fprint(out, "# index\n\n")

	thisHeading := rune(0)
	for _, name := range names {
		heading, _ := utf8.DecodeRuneInString(name)
		if scanner.IsCharAZ(heading) && heading != thisHeading {
			fmt.Fprintf(out, "\n## %v\n\n", string(heading))
			thisHeading = heading
		}
		ops := table[name]
		if name == "+" || name == "-" {
			name = "\\" + name
		}
		if len(ops) == 1 {
			op := ops[0]
			fmt.Fprintf(out, "- [%v](ops/%v.md#%v): %v\n", name, op.Group, op.Name, op.Title)
		} else {
			fmt.Fprintf(out, "- %v\n", name)
			for _, op := range ops {
				fmt.Fprintf(out, "  - [(%v) %v](ops/%v#%v.md): %v\n", op.Group, name, op.Group, op.Name, op.Title)
			}
		}
	}

	if err := os.WriteFile("../../doc/index.md", []byte(out.String()), 0o644); err != nil {
		log.Fatal(err)
	}
}
