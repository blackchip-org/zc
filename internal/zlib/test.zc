import bool
import io

errors; 0
failed; 0
passed; 0

name; ''
sub; ''

verbose; 'false'

native file

func record-fail /expected /have /want
    failed; 1 add
    'FAIL [/name] [/sub]'    io.println
    ' expected: [/expected]' io.println
    '     have: [/have]'     io.println
    '     want: [/want]'     io.println

func record-pass
    /verbose 'true' bool.eq
    /sub '' bool.neq
    if bool.and
        'PASS [/name] [/sub]' io.println
    passed; 1 add

func eq /a /b
	if /a /b bool.neq
        'eq' /a /b record-fail
    else
        record-pass

func abort //xs
    want-msg; /-xs
    /-xs 'false'
    if bool.neq
        'abort' 'true' 'false' record-fail
    elif /xs /want-msg str.starts-with not
        'abort' /-xs /want-msg record-fail
    else
        record-pass

func true /a
    /a 'true' eq

func false /a
    /a 'false' eq

func name /n
    name; clear /n

func sub /n
    sub; clear /n

func errors
    /errors

func failed
    /failed

func files //files
    for file; //files
        /file file

func passed
    /passed

func reset
    errors; clear 0
    passed; clear 0
    failed; clear 0

func ok
    /errors 0 bool.eq
    /passed 0 bool.gt
    /failed 0 bool.eq
    bool.and
    bool.and

func report
    '[/passed] passed, [/failed] failed, [/errors] error(s)' io.println

func verbose /v
    verbose; clear /v

func verbose=
    /verbose
